from ibapi.wrapper import EWrapper
from ibapi.client import EClient
from ibapi.contract import Contract
from ibapi.common import MarketDataTypeEnum
import threading
import time

class IBapi(EWrapper, EClient):
    def __init__(self):
        EWrapper.__init__(self)
        EClient.__init__(self, wrapper=self)
        self._next_valid_id = None
        self.price_data = {}

    def get_next_valid_id(self) -> int:
        """Returns a valid ID to send API requests and to place orders."""
        req_id = self._next_valid_id
        self._next_valid_id += 1
        return req_id

    def nextValidId(self, valid_id: int) -> None:
        # Callback generated by EClient.run(). We can now send requests.
        self._next_valid_id = valid_id

        # Request market data for AAPL and SPY
        apple_contract = Contract()
        apple_contract.symbol = 'AAPL'
        apple_contract.secType = 'STK'
        apple_contract.exchange = 'SMART'
        apple_contract.currency = 'USD'
        
        spy_contract = Contract()
        spy_contract.symbol = 'SPY'
        spy_contract.secType = 'STK'
        spy_contract.exchange = 'SMART'
        spy_contract.currency = 'USD'

        self.reqMarketDataType(MarketDataTypeEnum.DELAYED)
        self.reqMktData(self.get_next_valid_id(), apple_contract, '', True, False, [])
        self.reqMktData(self.get_next_valid_id(), spy_contract, '', True, False, [])

    def tickPrice(self, reqId, tickType, price, attrib):
        """Callback for market data updates."""
        #if tickType in [1, 2, 4, 6]:  # Bid, Ask, Last, Close prices
        self.price_data[reqId] = price
        print(f"Tick Price. Ticker Id: {reqId}, Tick Type: {tickType}, Price: {price}")

def run_loop():
    app.run()

app = IBapi()
app.connect('127.0.0.1', 4002, 124)

api_thread = threading.Thread(target=run_loop, daemon=True)
api_thread.start()
try:
    while True:
        time.sleep(10)  # Keep the script running
except KeyboardInterrupt:
    print("Disconnecting...")
    app.disconnect()
    api_thread.join()